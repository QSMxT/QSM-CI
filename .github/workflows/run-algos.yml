name: Reconstruct and evaluate

on:
  workflow_call:
    inputs:
      algo_list:
        required: true
        type: string
      runner:
        required: true
        type: string

jobs:
  generate_json_files:
    runs-on: ${{ fromJSON(inputs.runner) }}
    outputs:
      json_list: ${{ steps.collect_jsons.outputs.json_list }}
    steps:
      - name: Take ownership of workspace
        run: |
          echo "[INFO] Taking ownership of workspace `pwd` to $(whoami):$(id -gn)..."
          sudo chown -R $(whoami):$(id -gn) .

      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Fetch BIDS data and generate JSON files
        env:
          OSF_TOKEN: ${{ secrets.OSF_TOKEN }}
          OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
          OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
          OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
          OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
          OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}
          PARSE_APPLICATION_ID: ${{ secrets.PARSE_APPLICATION_ID }}
          PARSE_REST_API_KEY: ${{ secrets.PARSE_REST_API_KEY }}
          PARSE_MASTER_KEY: ${{ secrets.PARSE_MASTER_KEY }}
        run: |
          export PATH=$PATH:/home/runnerx/.local/bin

          # --- Fetch base data first, if missing ---
          if [ ! -d "data/chimodel" ]; then
            echo "[INFO] Base data not found. Fetching data.tar from OSF..."
            osf --project 9jc42 fetch data.tar
            tar xf data.tar
            rm data.tar
          fi

          echo "[INFO] Generating BIDS variants from qsm-forward-params.json..."
          cat qsm-forward-params.json | jq -c '.[]' | while read cfg; do
            acq=$(echo $cfg | jq -r '."--acq" // empty')
            vox=$(echo $cfg | jq -r '."--voxel-size" | @sh' | tr -d "'")
            savefield=$(echo $cfg | jq -r '."--save-field" // false')

            echo "[INFO] Running qsm-forward with acq=$acq voxel=$vox save-field=$savefield"
            qsm-forward head data/ bids ${acq:+--acq $acq} --voxel-size $vox ${savefield:+--save-field True}

            find bids/sub-1/anat -type f -name "*.nii" \
              -exec bash -c 'f="{}"; mv "$f" "${f/sub-1_/sub-1_acq-'$acq'_}"' \;

            find bids/sub-1/anat -type f -name "*.json" \
              -exec bash -c 'f="{}"; mv "$f" "${f/sub-1_/sub-1_acq-'$acq'_}"' \;

            # --- Rename derivative qsm-forward outputs (Chimap, mask, dseg) ---
            if ls bids/derivatives/qsm-forward/sub-1/anat/*.nii 1> /dev/null 2>&1; then
              find bids/derivatives/qsm-forward/sub-1/anat -maxdepth 1 -type f -name "*.nii" \
                -exec bash -c 'f="{}"; mv "$f" "${f/sub-1_/sub-1_acq-'$acq'_}"' \;
            else
              echo "[INFO] No derivative NIfTI files found to rename for $acq"
            fi

          done

          # Debug output
          echo "[DEBUG] Generated BIDS directory structure:"
          ls -R bids/

          echo "[DEBUG] Generated BIDS structure before parsing:"
          ls -R bids/sub-1/anat/

          echo "[INFO] Parsing BIDS..."
          python qsm_ci/parse_bids.py bids .

          echo "[DEBUG] Generated JSON files:"
          ls -l *.json
          echo "[DEBUG] Contents of first JSON file:"
          cat $(ls group*.json | head -n1)

      - name: Collect JSON files
        id: collect_jsons
        run: |
          # Find all JSON files matching the pattern group*.json and join them into a JSON array string
          json_list=$(find . -name "group*.json" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=json_list::${json_list}"

      - name: Upload JSON files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: json-files
          path: "*.json"

  recon_and_evaluate:
    needs: generate_json_files
    runs-on: ${{ fromJSON(inputs.runner) }}
    if: ${{ inputs.algo_list != '[]' }}
    strategy:
      matrix:
        algo: ${{ fromJSON(inputs.algo_list) }}
        json_file: ${{ fromJSON(needs.generate_json_files.outputs.json_list) }}
    steps:
      - name: Take ownership of workspace
        run: |
          echo "[INFO] Taking ownership of workspace `pwd` to $(whoami):$(id -gn)..."
          sudo chown -R $(whoami):$(id -gn) .

      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Download JSON files
        uses: actions/download-artifact@v4
        with:
          name: json-files
          path: downloaded_jsons

      - name: Fetch BIDS data
        env:
          OSF_TOKEN: ${{ secrets.OSF_TOKEN }}
          OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
          OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
          OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
          OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
          OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}
        run: |
          export PATH=$PATH:/home/runnerx/.local/bin

          if [ ! -d "bids" ]; then
            osf --project 9jc42 fetch data.tar
            tar xf data.tar
            rm data.tar
            qsm-forward head data/ bids
          fi

      - name: Extract fields from JSON
        id: extract
        run: |
          BIDS_SUBJECT=$(jq -r '.Subject' downloaded_jsons/${{ matrix.json_file }})
          BIDS_SESSION=$(jq -r '.Session' downloaded_jsons/${{ matrix.json_file }})
          BIDS_ACQUISITION=$(jq -r '.Acquisition' downloaded_jsons/${{ matrix.json_file }})
          BIDS_RUN=$(jq -r '.Run' downloaded_jsons/${{ matrix.json_file }})

          echo "BIDS_SUBJECT=$BIDS_SUBJECT" >> $GITHUB_ENV
          echo "BIDS_SESSION=$BIDS_SESSION" >> $GITHUB_ENV
          echo "BIDS_ACQUISITION=$BIDS_ACQUISITION" >> $GITHUB_ENV
          echo "BIDS_RUN=$BIDS_RUN" >> $GITHUB_ENV
        shell: bash

      - name: ${{ matrix.algo }} - sub-${{ env.BIDS_SUBJECT }}_ses-${{ env.BIDS_SESSION }}_acq-${{ env.BIDS_ACQUISITION }}_run-${{ env.BIDS_RUN }}
        env:
          OSF_TOKEN: ${{ secrets.OSF_TOKEN }}
          OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
          OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
          OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
          OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
          OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}
          PARSE_APPLICATION_ID: ${{ secrets.PARSE_APPLICATION_ID }}
          PARSE_REST_API_KEY: ${{ secrets.PARSE_REST_API_KEY }}
          PARSE_MASTER_KEY: ${{ secrets.PARSE_MASTER_KEY }}
          BIDS_SUBJECT: ${{ env.BIDS_SUBJECT }}
          BIDS_SESSION: ${{ env.BIDS_SESSION }}
          BIDS_ACQUISITION: ${{ env.BIDS_ACQUISITION }}
          BIDS_RUN: ${{ env.BIDS_RUN }}
          PIPELINE_NAME: ${{ matrix.algo }}
          INPUTS_JSON: downloaded_jsons/${{ matrix.json_file }}
        run: |
          echo "[INFO] Reconstructing and evaluating algo=${PIPELINE_NAME} BIDS_SUBJECT=$BIDS_SUBJECT, BIDS_SESSION=$BIDS_SESSION, BIDS_ACQUISITION=$BIDS_ACQUISITION, BIDS_RUN=$BIDS_RUN"
          
          if [ $(docker ps -a -q -f name=${PIPELINE_NAME}) ]; then
            echo "[INFO] Found existing container $(docker ps -a -q -f name=${PIPELINE_NAME})..."
            echo "[INFO] Stopping container ${PIPELINE_NAME}..."
            sudo docker container stop ${PIPELINE_NAME}
            echo "[INFO] Removing container ${PIPELINE_NAME}..."
            sudo docker container rm ${PIPELINE_NAME}
          fi

          echo "[INFO] Creating Python virtual envrionment..."
          sudo python -m venv venv
          export PATH=`pwd`/venv/bin:$PATH

          echo "[INFO] Checking pip version"
          ./venv/bin/pip --version

          echo "[INFO] Installing docker and qsm-ci..."
          sudo ./venv/bin/pip install docker
          sudo ./venv/bin/pip install -e .

          echo "[INFO] Starting qsm-ci..."
          sudo -E ./venv/bin/qsm-ci run algos/${PIPELINE_NAME} bids work_dir $INPUTS_JSON

          sudo -E ./venv/bin/qsm-ci eval \
            --ground_truth work_dir/bids/derivatives/qsm-forward/sub-1/anat/sub-1_Chimap.nii \
            --estimate work_dir/bids/derivatives/${PIPELINE_NAME}/sub-1/anat/*Chimap.nii* \
            --roi work_dir/bids/derivatives/qsm-forward/sub-1/anat/sub-1_mask.nii \
            --output_dir work_dir/output

          cat work_dir/output/*.md* >> $GITHUB_STEP_SUMMARY

          sudo -E ./venv/bin/qsm-ci upload \
            work_dir/bids/derivatives/${PIPELINE_NAME}/sub-1/anat/*Chimap.nii* \
            work_dir/output/*.json* \
            $PIPELINE_NAME \
            $PARSE_APPLICATION_ID \
            $PARSE_REST_API_KEY \
            $PARSE_MASTER_KEY

          